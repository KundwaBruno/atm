import Head from "next/head";
import { useRouter } from "next/dist/client/router";
import Input from "../components/input";
import Button from "../components/button";
import LoadingModal from "../components/LoadingModal";
import styles from "../styles/home.module.css";
import { useState } from "react";
import cardInfos from "../utils/cardInfos";

const cardInputs = [
  {
    label: "Card number",
    placeholder: "0000 - 0000 - 0000 - 0000",
    name: "cardNumber",
    type: "text",
  },
  {
    label: "Card holder name",
    placeholder: "Ex: John doe",
    name: "cardName",
    type: "text",
  },
  {
    label: "Expiry",
    placeholder: "MM / YY",
    name: "expiryDate",
    type: "text",
  },
  {
    label: "CVC/CVV",
    placeholder: "123",
    name: "cvc",
    type: "text",
  },
  {
    label: "PIN",
    placeholder: "1234",
    name: "pin",
    type: "text",
  },
];

export default function Home() {
  const [success, setSuccess] = useState(false);
  const [credentials, setCredentials] = useState(false);
  const [loading, setLoading] = useState(false);
  const [counter, setCounter] = useState(0);
  const [err, setErr] = useState("");
  const router = useRouter();
  const checkCard = () => {
    setErr();
    setSuccess(false);
    setLoading(true);
    setTimeout(() => {
      cardInfos.forEach((info) => {
        if (
          credentials.pin === info.pin &&
          credentials.cardName === info.cardName
        ) {
          setSuccess(true);
          setTimeout(() => {
            localStorage.setItem("user", JSON.stringify(info));
            router.push(`/account`);
            setLoading(false);
          }, 1000);
        } else {
          setLoading(false);
          setSuccess(false);
          if (counter >= 3) {
            setErr(
              "This card has been blocked please contact your nearest branch"
            );
          } else {
            setCounter(counter + 1);
            setErr("Invalid credentials");
          }
        }
      });
    }, 1000);
  };
  const onChangeHandler = (e) => {
    const { name } = e.target;
    const { value } = e.target;
    setCredentials({ ...credentials, [name]: value });
  };
  return (
    <>
      <Head>
        <title>ATM | Make your transactions</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css"
          integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p"
          crossOrigin="anonymous"
        />
      </Head>
      <div className={styles.loginContainer}>
        <div className={styles.header}>ATM | Login</div>
        {err && <div className={styles.errMsg}>{err}</div>}
        <div className={styles.loginBox}>
          <LoadingModal
            success={success}
            loading={loading}
            msg="Signed in successfull"
          />
          <div className={styles.cardInfo}>
            {cardInputs.map((i, index) => {
              return (
                <Input
                  key={index}
                  name={i.name}
                  credentials={credentials}
                  type={i.type}
                  placeholder={i.placeholder}
                  label={i.label}
                  onChange={onChangeHandler}
                />
              );
            })}
          </div>
        </div>
        <div className={styles.loginButtonContainer}>
          <Button onClick={checkCard} label="Validate" />
        </div>
      </div>
    </>
  );
}
